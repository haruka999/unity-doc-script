<signature>
CurveField(AnimationCurve,GUILayoutOption[])
CurveField(string,AnimationCurve,GUILayoutOption[])
CurveField(GUIContent,AnimationCurve,GUILayoutOption[])
CurveField(AnimationCurve,Color,Rect,GUILayoutOption[])
CurveField(string,AnimationCurve,Color,Rect,GUILayoutOption[])
CurveField(GUIContent,AnimationCurve,Color,Rect,GUILayoutOption[])
</signature>
{img FollowCurve.png}\\
AnimationCurve型のフィールドを作成します
フィールドをクリックすることで編集ウィンドウが表示されます
BEGIN EX
	// Makes the selected GameObject follow the animation curve.
	//
	// Usage: Generate the curves for X,Y and Z axis of your desired GameObject
	// Select an Object and click Generate Curve.
	// Press Play and see your object moving.


	class FollowCurve extends EditorWindow {


		var curveX : AnimationCurve = AnimationCurve.Linear(0,0,10,10);
		var curveY : AnimationCurve = AnimationCurve.Linear(0,0,10,10);
		var curveZ : AnimationCurve = AnimationCurve.Linear(0,0,10,10);
		

		@MenuItem("Examples/Create Curve For Object")
		static function Init() {
			var window = GetWindow(FollowCurve);
			window.Show();
		}
		
		function OnGUI() {
			curveX = EditorGUILayout.CurveField("Animation on X", curveX);
			curveY = EditorGUILayout.CurveField("Animation on Y", curveY);
			curveZ = EditorGUILayout.CurveField("Animation on Z", curveZ);
			
			if(GUILayout.Button("Generate Curve"))
				AddCurveToSelectedGameObject();
		}
		
		function  AddCurveToSelectedGameObject() {
			if(Selection.activeGameObject) {
				var comp : FollowAnimationCurve = 
					Selection.activeGameObject.AddComponent(FollowAnimationCurve);
				comp.SetCurves(curveX, curveY, curveZ);
			} else {
				Debug.LogError("No Game Object selected for adding an animation curve");
			}
		}
	}
END EX
And the script that works with the example:
BEGIN EX
	// This script has to go outside of the Editor Folder.

	var curveX : AnimationCurve;
	var curveY : AnimationCurve;
	var curveZ : AnimationCurve;

	function SetCurves(xC : AnimationCurve, yC : AnimationCurve, zC : AnimationCurve) {
		curveX = xC;
		curveY = yC;
		curveZ = zC;
	}
	function Update() {
		transform.position = Vector3(curveX.Evaluate(Time.time),
									curveY.Evaluate(Time.time),
									curveZ.Evaluate(Time.time));
	}
END EX
@param label 左側に表示する文字列
@param value 現在値
@param color カーブ曲線の色
@param ranges カーブウィンドウで表示できる範囲
@param options 幅・高さ
SA: GUILayout::ref::Width, GUILayout::ref::Height, GUILayout::ref::MinWidth, GUILayout::ref::MaxWidth, GUILayout::ref::MinHeight, 
GUILayout::ref::MaxHeight, GUILayout::ref::ExpandWidth, GUILayout::ref::ExpandHeight.
@return The curve edited by the user.
<signature>
CurveField(SerializedProperty,Color,Rect,GUILayoutOption[])
</signature>
AnimationCurve型のフィールドを作成します
フィールドをクリックすることで編集ウィンドウが表示されます
@param property The curve to edit.
@param color カーブ曲線の色
@param ranges カーブウィンドウで表示できる範囲
@param options 幅・高さ
SA: GUILayout::ref::Width, GUILayout::ref::Height, GUILayout::ref::MinWidth, GUILayout::ref::MaxWidth, GUILayout::ref::MinHeight, 
GUILayout::ref::MaxHeight, GUILayout::ref::ExpandWidth, GUILayout::ref::ExpandHeight.
