<signature>
CurveField(Rect,AnimationCurve)
CurveField(Rect,string,AnimationCurve)
CurveField(Rect,GUIContent,AnimationCurve)
CurveField(Rect,AnimationCurve,Color,Rect)
CurveField(Rect,string,AnimationCurve,Color,Rect)
CurveField(Rect,GUIContent,AnimationCurve,Color,Rect)
</signature>
Make a field for editing an [[AnimationCurve]].
{img EditorGUICurveField.png}\\
''Curve field in an Editor Window.''
BEGIN EX
	// Makes the selected GameObject follow the animation curve.
	//
	// Usage: Generate the curves for X,Y and Z axis of your desired GameObject
	// Select an Object and click Generate Curve.
	// Press Play and see your object moving.
	
	
	class EditorGUICurveField extends EditorWindow {
	
		var curveX : AnimationCurve = AnimationCurve.Linear(0,0,10,10);
		var curveY : AnimationCurve = AnimationCurve.Linear(0,0,10,10);
		var curveZ : AnimationCurve = AnimationCurve.Linear(0,0,10,10);
	
		@MenuItem("Examples/Create Curve For Object")
		static function Init() {
			var window = GetWindow(EditorGUICurveField);
			window.position = Rect(0,0,200,100);
			window.Show();
		}
		
		function OnGUI() {
			curveX = EditorGUI.CurveField(
				Rect(3,3,position.width-6,15),
				"Animation on X", curveX);
			curveY = EditorGUI.CurveField(
				Rect(3,20,position.width-6,15),
				"Animation on Y", curveY);
			curveZ = EditorGUI.CurveField(
				Rect(3,45,position.width-6,15),
				"Animation on Z", curveZ);
			
			if(GUI.Button(Rect(3,60,position.width-6,30),"Generate Curve"))
				AddCurveToSelectedGameObject();
		}
		
		function AddCurveToSelectedGameObject() {
			if(Selection.activeGameObject) {
				var comp : FollowAnimationCurve = 
					Selection.activeGameObject.AddComponent(FollowAnimationCurve);
					comp.SetCurves(curveX, curveY, curveZ);
			} else {
				Debug.LogError("No Game Object selected for adding an animation curve");
			}
		}
	}
END EX
And the script attached to this editor script:
BEGIN EX
	// FollowAnimationCurve.js
	// This script has to go outside of the Editor Folder.

	var curveX : AnimationCurve;
	var curveY : AnimationCurve;
	var curveZ : AnimationCurve;

	function SetCurves(xC : AnimationCurve, yC : AnimationCurve, zC : AnimationCurve) {
		curveX = xC;
		curveY = yC;
		curveZ = zC;
	}
	function Update() {
		transform.position = Vector3(curveX.Evaluate(Time.time),
									curveY.Evaluate(Time.time),
									curveZ.Evaluate(Time.time));
	}
END EX
@param position 表示位置
@param label 左側に表示する文字列
@param value シリアライズ化された現在値
@param color カーブ曲線の色
@param ranges カーブウィンドウで表示できる範囲
@return The curve edited by the user.
<signature>
CurveField(Rect,SerializedProperty,Color,Rect)
</signature>
AnimationCurve型のフィールドを作成します
フィールドをクリックすることで編集ウィンドウが表示されます
@param position 表示位置
@param property The curve to edit.
@param color カーブ曲線の色
@param ranges カーブウィンドウで表示できる範囲
