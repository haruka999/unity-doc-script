<signature>
PushAssetDependencies()
</signature>
異なるアセットバンドルやプレイヤーの相互参照・依存関係を管理することが出来ます
こうすることで同じアセットを保持する場合最初にビルドされたものにしか実際のアセットは含まれません
以降はアセットの参照番号のみを保持します
従ってアセットバンドルが他のアセットバンドルに依存関係を持つ場合、必ず両方をロードしなければいけません
アセットの依存関係のためにプッシュし、そのレイヤー全てのリソースを共有するとき、再度プッシュすると以前の依存関係を継承します
PopAssetDependenciesと組み合わせて使用します
BEGIN EX
	@MenuItem("Assets/Auto Build Asset Bundles")
	static function ExportResource () {

		// Enable cross-references for all following asset bundles files until
		// we call PopAssetDependencies
		BuildPipeline.PushAssetDependencies();

		var options =
			BuildAssetBundleOptions.CollectDependencies |
			BuildAssetBundleOptions.CompleteAssets;

		// All subsequent resources share assets in this asset bundles
		// It is up to you to ensure that the shared asset bundle is
		// loaded prior to loading other resources
		BuildPipeline.BuildAssetBundle(
			AssetDatabase.LoadMainAssetAtPath("assets/artwork/lerpzuv.tif"),
			null, "Shared.unity3d", options);

		// By pushing and popping around the asset bundle, this file
		// will share resources but later asset bundles will not share assets in this resource
		BuildPipeline.PushAssetDependencies();
		BuildPipeline.BuildAssetBundle(
			AssetDatabase.LoadMainAssetAtPath("Assets/Artwork/Lerpz.fbx"),
			null, "Lerpz.unity3d", options);
		BuildPipeline.PopAssetDependencies();

		// By pushing and popping around the asset bundle, this file
		// will share resources but later asset bundles will not share assets in this resource
		BuildPipeline.PushAssetDependencies();
		BuildPipeline.BuildAssetBundle(
			AssetDatabase.LoadMainAssetAtPath("Assets/Artwork/explosive guitex.prefab"),
			null, "explosive.unity3d", options);
		BuildPipeline.PopAssetDependencies();

		// By pushing and popping around the asset bundle, this file
		// will share resources but later asset bundles will not share assets in this resource
		BuildPipeline.PushAssetDependencies();
		BuildPipeline.BuildStreamedSceneAssetBundle(
			["Assets/AdditiveScene.unity"], "AdditiveScene.unity3d", BuildTarget.WebPlayer);	
		BuildPipeline.PopAssetDependencies();
		
		BuildPipeline.PopAssetDependencies();
	}
END EX
SA: ::ref::PopAssetDependencies, ::ref::BuildAssetBundle.
