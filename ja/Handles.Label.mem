<signature>
Label(Vector3,string)
Label(Vector3,Texture)
Label(Vector3,GUIContent)
Label(Vector3,string,GUIStyle)
Label(Vector3,GUIContent,GUIStyle)
</signature>
3D空間にラベルを描画します

{img HandlesLabel.png}\\
BEGIN EX
	// Create a 180 degrees wire arc with a ScaleValueHandle attached to the disc
	// that lets you modify the "shieldArea" var in the WireArcExample.js, also
	// lets you visualize some info of the transform

	@CustomEditor (DummyLabelScript)
	class LabelHandle extends Editor {
	    function OnSceneGUI () {
	    	Handles.color = Color.blue;
	 		Handles.Label(target.transform.position + Vector3.up*2,
	 				target.transform.position.ToString() + "\nShieldArea: " +
	 				target.shieldArea.ToString());
	 		Handles.BeginGUI(Rect(Screen.width - 100, Screen.height - 80, 90,50));

	        Handles.DrawWireArc(target.transform.position, 
	        		target.transform.up, 
	        		-target.transform.right, 
	        		180, 
	        		target.shieldArea);
	        target.shieldArea = 
			Handles.ScaleValueHandle(target.shieldArea,
	        				target.transform.position + target.transform.forward*target.shieldArea,
	        				target.transform.rotation,
	        				1,
	        				Handles.ConeCap,
	        				1);
	    }
	}
END EX
And the script attached to this Handle:
BEGIN EX
	// DummyLavelScript.js

	var shieldArea : float = 5;
END EX
@param position 表示位置
@param text 表示する文字列
@param image 表示するテクスチャ
@param content 表示する文字列、テクスチャ、ツールチップ
@param style スタイル

__Note:__ Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.
