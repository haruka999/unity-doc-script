<signature>
AddObjectToAsset(Object,string)
</signature>
オブジェクトを下の階層（子）へ追加します
これは自作したデータを扱う際に最適です
追加されたObjectは削除を行うことは出来ません
再度全てを生成することになります
削除を行うとインスタンスIDも変更されてしまい、参照が外れてしまうので気をつけてください
BEGIN EX
	@MenuItem("GameObject/Create Material")
	static function CreateMaterial () {
		// Create a simple material asset
		var material = new Material (Shader.Find("Specular"));
		AssetDatabase.CreateAsset(material, "Assets/MyMaterial.mat");

		// Add an animation clip to it
		var animationClip = new AnimationClip ();
		animationClip.name = "My Clip";
		AssetDatabase.AddObjectToAsset(animationClip, material);

		// Reimport the asset after adding an object.
		// Otherwise the change only shows up when saving the project
		AssetDatabase.ImportAsset(AssetDatabase.GetAssetPath(animationClip));

		// Print the path of the created asset
		Debug.Log(AssetDatabase.GetAssetPath(material));
	}
END EX
<signature>
AddObjectToAsset(Object,Object)
</signature>
オブジェクトを下の階層（子）へ追加します
これは自作したデータを扱う際に最適です
追加されたObjectは削除を行うことは出来ません
再度全てを生成することになります
削除を行うとインスタンスIDも変更されてしまい、参照が外れてしまうので気をつけてください
BEGIN EX
	@MenuItem("GameObject/Create Material")
	static function CreateMaterial () {
		// Create a simple material asset
		var material = new Material (Shader.Find("Specular"));
		AssetDatabase.CreateAsset(material, "Assets/MyMaterial.mat");

		// Add an animation clip to it
		var animationClip = new AnimationClip ();
		animationClip.name = "My Clip";
		AssetDatabase.AddObjectToAsset(animationClip, material);

		// Reimport the asset after adding an object.
		// Otherwise the change only shows up when saving the project
		AssetDatabase.ImportAsset(AssetDatabase.GetAssetPath(animationClip));

		// Print the path of the created asset
		Debug.Log(AssetDatabase.GetAssetPath(material));
	}
END EX
