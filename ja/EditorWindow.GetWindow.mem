<signature>
GetWindow(Type)
GetWindow(Type,bool)
GetWindow(Type,bool,string)
GetWindow(Type,bool,string,bool)
</signature>
{img GetWindowEx.png}\\
EditorWindowのタイプを指定してウィンドウを取得または生成を行います
ウィンドウが生成されていない場合は自動で生成が行われ、そのインスタンスを取得します
インスタンスはキャッシュされており、この関数で呼び出される限り同じインスタンスを使用し、ウィンドウの重複を避ける事ができます
内部でEditorWindow.Show相当の処理が呼び出されています
BEGIN EX
	// Simple script that creates a new non-dockable window

	import UnityEditor;

	class GetWindowEx extends EditorWindow {	
		@MenuItem("Example/Display simple Window")
		static function Initialize() {
			var window : GetWindowEx = EditorWindow.GetWindow(GetWindowEx, true, "My Empty Window");
		}
	}
END EX
@param t ウィンドウのタイプを指定します。EditorWindowを継承している必要があります
@param utility trueで常に前面に表示されるようになります。EditorWindow.ShowUtilityと同じ動作になります
@param title ウィンドウのタイトルを設定します。nullの場合クラス名を使用します
<signature>
GetWindow<T>()
GetWindow<T>(bool)
GetWindow<T>(bool,string)
GetWindow<T>(string)
GetWindow<T>(string,bool)
GetWindow<T>(bool,string,bool)
</signature>
EditorWindowのタイプを指定してウィンドウを取得または生成を行います
ウィンドウが生成されていない場合は自動で生成が行われ、そのインスタンスを取得します
インスタンスはキャッシュされており、この関数で呼び出される限り同じインスタンスを使用し、ウィンドウの重複を避ける事ができます
内部でEditorWindow.Show相当の処理が呼び出されています
@param T The type of the window. Must derive from EditorWindow.
@param utility trueで常に前面に表示されるようになります。EditorWindow.ShowUtilityと同じ動作になります
@param title ウィンドウのタイトルを設定します。nullの場合クラス名を使用します
<signature>
GetWindow<T>(Type[])
GetWindow<T>(string,Type[])
GetWindow<T>(string,bool,Type[])
</signature>
EditorWindowのタイプを指定してウィンドウを取得または生成を行います
ウィンドウが生成されていない場合は自動で生成が行われ、そのインスタンスを取得します
インスタンスはキャッシュされており、この関数で呼び出される限り同じインスタンスを使用し、ウィンドウの重複を避ける事ができます
内部でEditorWindow.Show相当の処理が呼び出されています
The created window will attempt to be docked next to the first founds specified window type.
@param T The type of the window. Must derive from EditorWindow.
@param title ウィンドウのタイトルを設定します。nullの場合クラス名を使用します
@param desiredDockNextTo 指定したタイプのウィンドウが存在する場合、ドッキングします。複数指定した場合は最初にヒットしたものになります
