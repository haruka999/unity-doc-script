<signature>
GetWindowWithRect(Type,Rect)
GetWindowWithRect(Type,Rect,bool)
GetWindowWithRect(Type,Rect,bool,string)
</signature>
{img GetWindowRectEx.png}\\
タイプを指定してEditorWindowを生成します
動作はEditorWindow.GetWindowと同じですがRect情報からウィンドウの位置、大きさを設定することが可能です
BEGIN EX
	// Create a dockable empty window at the top left corner of the screen
	// with 100px width and 150px height

	import UnityEditor;

	class GetWindowRectEx extends EditorWindow {	
		@MenuItem("Example/Display simple sized Window")
		static function Initialize() {
			var window : GetWindowEx = 
				EditorWindow.GetWindowWithRect(GetWindowRectEx, Rect(0, 0, 100, 150));
		}
	}
END EX
@param t ウィンドウのタイプを指定します。EditorWindowを継承している必要があります
@param rect ウィンドウの生成に使用されるRect情報
@param utility trueで常に前面に表示されるようになります。EditorWindow.ShowUtilityと同じ動作になります
@param title ウィンドウのタイトルを設定します。nullの場合クラス名を使用します
<signature>
GetWindowWithRect<T>(Rect)
GetWindowWithRect<T>(Rect,bool)
GetWindowWithRect<T>(Rect,bool,string)
GetWindowWithRect<T>(Rect,bool,string,bool)
</signature>
タイプを指定してEditorWindowを生成します
動作はEditorWindow.GetWindowと同じですがRect情報からウィンドウの位置、大きさを設定することが可能です
@param t ウィンドウのタイプを指定します。EditorWindowを継承している必要があります
@param rect ウィンドウの生成に使用されるRect情報
@param utility trueで常に前面に表示されるようになります。EditorWindow.ShowUtilityと同じ動作になります
@param title ウィンドウのタイトルを設定します。nullの場合クラス名を使用します
