<signature>
Foldout(Rect,bool,string)
Foldout(Rect,bool,GUIContent)
Foldout(Rect,bool,string,bool)
Foldout(Rect,bool,GUIContent,bool)
Foldout(Rect,bool,string,GUIStyle)
Foldout(Rect,bool,string,bool,GUIStyle)
Foldout(Rect,bool,GUIContent,GUIStyle)
Foldout(Rect,bool,GUIContent,bool,GUIStyle)
</signature>
{img EditorGUIFoldout.png}\\
折りたたみ式のラベルを作成します
foldoutがtrueの場合、展開されます
BEGIN EX
	// Create a foldable menu that hides/shows the selected transform
	// position.
	// if no Transform is selected, the Foldout item will be folded until
	// a transform is selected.

	class EditorGUIFoldout extends EditorWindow {
		var showPosition : boolean = true;
		var status : String = "Select a GameObject";
		@MenuItem("Examples/Foldout Usage")
		static function Init() {
			var window = GetWindow(EditorGUIFoldout);
			window.position = Rect(0, 0, 150, 60);
			window.Show();
		}

		function OnGUI() {
			showPosition = EditorGUI.Foldout(Rect(3,3,position.width-6,15),showPosition, status);
			if(showPosition)
				if(Selection.activeTransform) {
					Selection.activeTransform.position = 
					EditorGUI.Vector3Field(Rect(3,25,position.width -6 ,40),
							"Position", 
							Selection.activeTransform.position);
					status = Selection.activeTransform.name;
				}
			if(!Selection.activeTransform) {
				status = "Select a GameObject";
				showPosition = false;	
			}
		}
		function OnInspectorUpdate() {
			this.Repaint();
		}
	}
END EX
@param position 表示位置
@param foldout タイトルバーの状態。trueの場合、展開されています
@param content 表示する文字列
@param style スタイル
@param toggleOnLabelClick ラベルをクリックした時にも展開をすることが出来るかどうか。trueの場合、展開することが出来ます
@return The foldout state selected by the user. If true, you should render sub-objects.
